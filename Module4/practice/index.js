// "use strict";

// const user = {
//   name: 'Frank',
//   age: 21,
//   male: true,
//   getInfo: function() {
//     return `name: ${this.name} / age: ${this.age} / male: ${this.male}`
//   }
// };
// // console.log(user.getInfo());
// // console.log(user.name);
// // console.log(user.age);
// // console.log(user.male);
// user.height = 180;
// // delete user.name;
// // console.log(user.getInfo());

// for (const key in user) {
//   console.log(`${key}: ${user[key]}`);
// }
// // console.log(Object.keys(user));
// // console.log(Object.values(user));
// console.log("");
// const userArr = Object.entries(user);
// console.log(userArr);
// console.log("");
// for (const el of userArr) {
//   console.log(`${el[0]}: ${el[1]}`);
// }

// // ------------------------------------------------

// const a = {
//   x: 1,
//   y: 2
// };

// const b = {
//   x: 0,
//   z: 3
// }

// // const c = {...a, ...b};
// const c = Object.assign({}, a, b);

// console.log(c);

// const arr1 = [1, 2, 3];
// const arr2 = [4, 5, 6];

// const arr3 = [...arr1, ...arr2];
// console.log(arr3);

// const hotel = {
//   name : "Resort Hotel",
//   stars: 5,
//   capacity: 100,
// };

// const person = {
//   name: "Hi",
//   age: 25,
// }

// // –û–±—ä—è–≤–∏–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –ø—Ä–∏—Å–≤–æ–∏–º –∏–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –æ–±—ä–µ–∫—Ç–∞
// const { name, stars, status = "free" } = hotel;
// const { name: name1, age, status: status1 = "asdadsa" } = person;

// console.log(name, stars, status);
// console.log(name1, age, status1);

// =============================–ú–æ–¥—É–ª—å 4, —É—Ä–æ–∫ 2=============================

// const users = ["Greengo", "Riki", "Floyd", "Marchellos"];
// let userIndex;

// for (let input of users) {
//   if (input === "Riki") {
//     userIndex = users.indexOf(input);
//   }
// }
// console.log(userIndex);

// let ask = prompt("Add a new user");

// if (users.includes(userInput) === false) {
//   users.push(userInput);
// } else {
//   alert ('This user has allready');
// }

// for (let user of users) {
//   let exist = true;
//   if (ask === user) {
//     alert("this user already exists");
//   } else {
//     users.push(ask);
//   }
// }
// console.log(userIndex);
// sliseArr = users.splice(userIndex,1);
// console.log(sliseArr);
// console.log(users);
// users.splice(userIndex, 0, "hi");
// console.log(users);

// –î–∞–ª—å—à–µ –¥–∞–≤–∞–π—Ç–µ –ø–µ—Ä–µ–ø–∏—à–µ–º –∫–∞–∂–¥—ã–π —à–∞–≥ –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é getUserID(id),
// addUser('string'), deleteUser(id), updateUser(id)

// function getUserID(name) {
//   let userIndex = "";
//   for (let input of users) {
//     if (input === name) {
//       userIndex = users.indexOf(input);
//     }
//   }
//   if (userIndex !== "") {
//     return userIndex;
//   } else {
//     alert("user is not finded");
//   }
//   console.log(userIndex);
// }

// console.log(getUserID("aabbbba")); // –µ—Å–ª–∏ —é–∑–µ—Ä–∞ –Ω–µ—Ç "user is not defined"

// const addUser = function(arr, name) {
//   if (arr.includes(name)) {
//     alert("user has already exist");
//   } else {
//     arr.push(name);
//   }
// };
// addUser(users, "Ajax");
// addUser(users, "Pablo");
// console.log(users);

// const deleteUser = userIndex => {
//   users.splice(userIndex, 1);
// };
// deleteUser(2);

// console.log("aftedDelete", users);
// deleteUser(getUserID("Max"));
// console.log(users);

// const updateUser = function(index, name, arr) {
//   arr[index] = name;
//   return arr;
// };
// console.log(getUserID("aaa"));
// console.log(updateUser(getUserID("aaa"), "Max", users));



// // - –≤—ã–≤–æ–¥–∏—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ–±—ä–µ–∫—Ç–∞ user –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∫–ª—é—á:–∑–Ω–∞—á–µ–Ω–∏–µ
// // –∏—Å–ø–æ–ª—å–∑—É—è Object.entries –∏ for...of

// const users = [
//   { id: "user_id_1", name: "Greengo" },
//   { id: "user_id_2", name: "Riki" },
//   { id: "user_id_3", name: "Floyd" },
//   { id: "user_id_4", name: "Marchellos" }
// ];
// // –æ–±–Ω–æ–≤–∏–º —Ñ—É–Ω–∫—Ü–∏—é getUserID id: 'user_id_111' - –¥–æ–ª–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å
// // –æ–±—ä–µ–∫—Ç —é–∑–µ—Ä —Å id user_id_111

// function getUserID(id) {
//   let userIndex = "";
//   for (let input of users) {
//     if (input.id === id) {
//       userIndex = users.indexOf(input);
//     }
//   }
//   if (userIndex !== "") {
//     return userIndex;
//   } else {
//     alert("user is not finded");
//   }
//   console.log(userIndex);
// }

// console.log(getUserID("user_id_2"));
// console.log(users[getUserID("user_id_2")].name);
// // -----------------------------------------
// const deleteUser = userIndex => {
//   users.splice(userIndex, 1);
// };
// deleteUser(2);
// console.log(users);
// console.log(deleteUser("user_id_111"));
// console.log(users);

// // // -----------------------------------------

// const updateUser = function(index, name, arr) {
//   arr[index] = name;
//   return arr[index];
// };

// const update = updateUser(getUserID("user_id_4"), 'Max', users);
// console.log(getUserID("user_id_2"));
// console.log(users);

// const addUser = function(arr, obj) {
//   arr.push(obj);
// }

// addUser(users, {id: 'user_id_555', name:'Ajax'});
// addUser(users, {id: 'user_id_666', name: 'Pablo'});
// console.log(users);

// const getAllUsers = function(arr) {
//   for (const el of arr) {
//     console.log(`id: ${el.id} name: ${el.name}`);
//   }
//  }

//  console.log(getAllUsers(users));


// --------------------practic--------------------------------

// const Student = function(name, birthday, slogan) {
//   this.name = name;
//   this.birthday = birthday;
//   this.slogan = slogan;
//   this.getSlogan = function() {
//     alert(`${this.slogan}`);
//   }
// }

// const newStudent = new Student('Ben', '2.08.1988', 'Winter is comming');
// console.log('newStudent :', newStudent);
// newStudent.getSlogan();

// // ============–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–¥–∞–Ω–∏–µ ‚Ññ1 ==========================
// /*
//   –ù–∞–ø–∏—à–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç, –∫–æ—Ç–æ—Ä—ã–π, –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ user, –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ:

//     - –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª–µ mood —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º 'happy'

//     - –∑–∞–º–µ–Ω—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ hobby –Ω–∞ 'javascript'

//     - —É–¥–∞–ª—è–µ—Ç —Å–≤–æ–π—Å—Ç–≤–æ premium

//     - –≤—ã–≤–æ–¥–∏—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ–±—ä–µ–∫—Ç–∞ user –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∫–ª—é—á:–∑–Ω–∞—á–µ–Ω–∏–µ
//       –∏—Å–ø–æ–ª—å–∑—É—è —Ü–∏–∫–ª for...in

//     - –≤—ã–≤–æ–¥–∏—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ–±—ä–µ–∫—Ç–∞ user –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∫–ª—é—á:–∑–Ω–∞—á–µ–Ω–∏–µ
//       –∏—Å–ø–æ–ª—å–∑—É—è Object.keys –∏ for...of

//     - –≤—ã–≤–æ–¥–∏—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ–±—ä–µ–∫—Ç–∞ user –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∫–ª—é—á:–∑–Ω–∞—á–µ–Ω–∏–µ
//       –∏—Å–ø–æ–ª—å–∑—É—è Object.entries –∏ for...of
// */

// const user = {
//   name: "Mango",
//   age: 20,
//   hobby: "html",
//   premium: true
// };

// //1 - –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª–µ mood —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º 'happy'
// user.mood ='happy';
// console.log('user', user);

// //2 - –∑–∞–º–µ–Ω—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ hobby –Ω–∞ 'javascript'
// user.hobby = 'javascript';
// console.log('user', user);

// //3 - —É–¥–∞–ª—è–µ—Ç —Å–≤–æ–π—Å—Ç–≤–æ premium
// delete user.premium;
// console.log('user', user);

// //4 - –≤—ã–≤–æ–¥–∏—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ–±—ä–µ–∫—Ç–∞ user –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∫–ª—é—á:–∑–Ω–∞—á–µ–Ω–∏–µ
// // –∏—Å–ø–æ–ª—å–∑—É—è —Ü–∏–∫–ª for...in

// for (const key in user) {
//   console.log(`${key}: ${user[key]}`);
// }

// //5 - –≤—ã–≤–æ–¥–∏—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ–±—ä–µ–∫—Ç–∞ user –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∫–ª—é—á:–∑–Ω–∞—á–µ–Ω–∏–µ
// // –∏—Å–ø–æ–ª—å–∑—É—è Object.keys –∏ for...of

// const keys = Object.keys(user);
// console.log(keys);

// for(const key of keys) {
//   console.log(`${key}:, ${user[key]}`);
// }

// ---------------------Task 2 ---------------------------

/*
  –ù–∞–ø–∏—à—Ç–µ —Å–∫—Ä–∏–ø—Ç –∫–æ—Ç–æ—Ä—ã–π –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –∏ –≤—ã–≤–µ–¥–µ—Ç –≤ –∫–æ–Ω—Å–æ–ª—å 
  –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã–ø–æ–ª–Ω–∏–ª –±–æ–ª—å—à–µ –≤—Å–µ—Ö –∑–∞–¥–∞—á.

  –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –∏ –∫–æ–ª-–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã—Ö –∑–∞–¥–∞—á —Å–æ–¥–µ—Ä–∂–∞—Ç—Å—è 
  –∫–∞–∫ —Å–≤–æ–π—Å—Ç–≤–∞ –æ–±—ä–µ–∫—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–∏–º—è":"–∫–æ–ª-–≤–æ –∑–∞–¥–∞—á"
*/

// const tasksCompleted = {
//   ann: 29,
//   david: 35,
//   helen: 1,
//   lorence: 99
// };

// let tasksCompletedValues = Object.values(tasksCompleted);

// let maxValue = tasksCompletedValues[0];

// for ( let i = 1; i < tasksCompletedValues.length; i++) {
//   if (tasksCompletedValues[i] > maxValue) {
//     maxValue = tasksCompletedValues[i];
//   }
// }

// console.log(maxValue);


// ==================–î–æ–º–∞—à–∫–∞

/*
  –°–æ–∑–¥–∞–π—Ç–µ —Å–∫—Ä–∏–ø—Ç –∫–∞—Å—Å–∏—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ –¥–µ–Ω—å–≥–∏, 
  –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ —Ö–≤–∞—Ç–∞–µ—Ç 
  –¥–µ–Ω–µ–≥ –∏–ª–∏ –Ω–µ—Ç, —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ.
*/

/* –ï—Å—Ç—å –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤, –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–∏–º—è-—Ç–æ–≤–∞—Ä–∞":"—Ü–µ–Ω–∞ –∑–∞ –æ–¥–Ω—É –µ–¥–∏–Ω–∏—Ü—É" */ 
const products = {
  bread: 10,
  milk: 15,
  apples: 20,  
  chicken: 50,
  cheese: 40,
};

/* 
  –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é-–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä Cashier.
  
  –ü–æ–ª—è –±—É–¥—É—â–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –∫–∞—Å—Å–∏—Ä–∞ (üîî –æ–±—ä—è–≤–ª—è—é—Ç—Å—è –∫–∞–∫ this.–∏–º—è_–ø–æ–ª—è –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ): 
    - name - —Å—Ç—Ä–æ–∫–∞, –∏–º—è –∫–∞—Å—Å–∏—Ä–∞, –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
    
    - productDatabase - –æ–±—ä–µ–∫—Ç –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
    
    - customerMoney - —á–∏—Å–ª–æ, —Å—É–º–º–∞ –≤–≤–µ–¥–µ–Ω–Ω–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–µ–Ω–µ–≥, –≤—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 0 
    
    - getCustomerMoney(value) - –º–µ—Ç–æ–¥, –ø–æ–ª—É—á–∞–µ—Ç —á–∏—Å–ª–æ, –¥–µ–Ω—å–≥–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è, –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –µ–≥–æ –≤ –ø–æ–ª–µ customerMoney.
    
    - countTotalPrice(order) - –º–µ—Ç–æ–¥, –ø–æ–ª—É—á–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫, —Å—á–∏—Ç–∞–µ—Ç –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∫—É–ø–æ–∫.
      üîî –ö–ª—é—á–∏ –æ–±—ä–µ–∫—Ç–∞ order –µ—Å—Ç—å –≤ –æ–±—ä–µ–∫—Ç–µ productDatabase. –ò–∑ order –±–µ—Ä–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–¥–∏–Ω–∏—Ü –ø—Ä–æ–¥—É–∫—Ç–∞,
         –∞ –∏–∑ productDatbase —Ü–µ–Ω—É –∑–∞ –æ–¥–Ω—É —à—Ç—É–∫—É –∏ —É–º–Ω–æ–∂–∞–µ–º, —Ç–∞–∫ –ø–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –∑–∞–∫–∞–∑–µ.
         –ß—Ç–æ–±—ã –ø–æ—Å—á–∏—Ç–∞—Ç—å —Ü–µ–Ω—É –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∑–∞–∫–∞–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ü–∏–∫–ª, –ø–µ—Ä–µ–±—Ä–∞–≤ –≤—Å–µ –∫–ª—é—á–∏ order.
     
    - countChange(totalPrice) - –º–µ—Ç–æ–¥, —Å—á–∏—Ç–∞–µ—Ç —Å–¥–∞—á—É, —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É –æ–±—â–µ–π —Å—É–º–º–æ–π –ø–æ–∫—É–ø–æ–∫ –∏ –¥–µ–Ω—å–≥–∞–º–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è.
        * –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ customerMoney –Ω–µ –º–µ–Ω—å—à–µ —á–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ totalPrice
        * –ï—Å–ª–∏ –¥–µ–Ω–µ–≥ –±—ã–ª–æ –ø–µ—Ä–µ–¥–∞–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞–∑–Ω–∏—Ü—É –¥–µ–Ω–µ–≥.
        * –ï—Å–ª–∏ –≤ customerMoney –º–µ–Ω—å—à–µ –¥–µ–Ω–µ–≥ —á–µ–º –≤ totalPrice, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç null 
        
    - onSuccess(change) - –º–µ—Ç–æ–¥, –≤—ã–≤–æ–¥–∏—Ç –≤ –∫–æ–Ω—Å–æ–ª—å —Å—Ç—Ä–æ–∫—É `–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É, –≤–∞—à–∞ —Å–¥–∞—á–∞ ${change}!`.
    
    - onError() - –º–µ—Ç–æ–¥, –≤—ã–≤–æ–¥–∏—Ç –≤ –∫–æ–Ω—Å–æ–ª—å —Å—Ç—Ä–æ–∫—É '–û—á–µ–Ω—å –∂–∞–ª—å, –≤–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥ –Ω–∞ –ø–æ–∫—É–ø–∫–∏'   
    
    - reset() - –º–µ—Ç–æ–¥, —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –ø–æ–ª–µ customerMoney 0.
*/
// üîî –Ω–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –æ this –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ —Å–≤–æ–π—Å—Ç–≤–∞–º –∏ –º–µ—Ç–æ–¥–∞–º –±—É–¥—É—â–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞

function Cashier(name, productDatabase) {
  this.name = name;
  this.productDatabase = productDatabase;
  this.customerMoney = 0;
  this.getCustomerMoney = function(value) {
    this.customerMoney = value;
  };
  this.countTotalPrice = function(order) {
    let totalPrice = 0;
    for (let keys in order) {
      totalPrice += order[keys] * this.productDatabase[keys];
    }
    return totalPrice;
  };
  this.countChange = function(totalPrice) {
    let change = 0;
    if (this.customerMoney >= totalPrice) {
      change = this.customerMoney - totalPrice;
      return change;
    } else {
      return null;
    }
  }
  this.onSuccess = function(change) {
    if (change !== null) {
      alert(`–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É, –≤–∞—à–∞ —Å–¥–∞—á–∞ ${change}!`);
    }
  }
  this.onError = function(change) {
    if (change == null)
    alert('–û—á–µ–Ω—å –∂–∞–ª—å, –≤–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥ –Ω–∞ –ø–æ–∫—É–ø–∫–∏');
  }
  this.reset = function(customerMoney) {
    customerMoney = 0;
  }
};

/* –ó–∞–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –≤–∏–¥–µ –æ–±—ä–µ–∫—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞. "–∏–º—è-–ø—Ä–æ–¥—É–∫—Ç–∞":"–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ-–µ–¥–∏–Ω–∏—Ü" */
const order = {
  bread: 2,
  milk: 2,
  apples: 1,
  cheese: 1
};

/* –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è */
const mango = new Cashier('Mango', products);

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª–µ–π
console.log(mango.name); // Mango
console.log(mango.productDatabase); // —Å—Å—ã–ª–∫–∞ –Ω–∞ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (–æ–±—ä–µ–∫—Ç products)
console.log(mango.customerMoney); // 0

// –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ countTotalPrice –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –æ–±—â–µ–π —Å—É–º–º—ã
// –ø–µ—Ä–µ–¥–∞–≤–∞—è order - —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const totalPrice = mango.countTotalPrice(order);

// –ü—Ä–æ–≤–µ—Ä—è–º —á—Ç–æ –ø–æ—Å—á–∏—Ç–∞–ª–∏
console.log(totalPrice); // 110

// –í—ã–∑—ã–≤–∞–µ–º getCustomerMoney –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –¥–µ–Ω–µ–≥ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
mango.getCustomerMoney(300);

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤ –ø–æ–ª–µ —Å –¥–µ–Ω—å–≥–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
console.log(mango.customerMoney); // 300

// –í—ã–∑—ã–≤–∞–µ–º countChange –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Å–¥–∞—á–∏
const change = mango.countChange(totalPrice);

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–∞–º –≤–µ—Ä–Ω—É–ª countChange
console.log(change); // 190

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–¥—Å—á–µ—Ç–∞ –¥–µ–Ω–µ–≥
if(change !== null) {
   // –ü—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏ –≤—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ onSuccess
  mango.onSuccess(change); // –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É, –≤–∞—à–∞ —Å–¥–∞—á–∞ 190
} else {
  // –ü—Ä–∏ –Ω–µ—É–¥–∞—á–Ω–æ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏ –≤—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ onError   
  mango.onError(); // –û—á–µ–Ω—å –∂–∞–ª—å, –≤–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥ –Ω–∞ –ø–æ–∫—É–ø–∫–∏
}

// –í—ã–∑—ã–≤–∞–µ–º reset –ø—Ä–∏ –ª—é–±–æ–º –∏—Å—Ö–æ–¥–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
mango.reset();

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ—Å–ª–µ reset
console.log(mango.customerMoney); // 0

