"use strict";

// const user = {
//   name: 'Frank',
//   age: 21,
//   male: true,
//   getInfo: function() {
//     return `name: ${this.name} / age: ${this.age} / male: ${this.male}`
//   }
// };
// // console.log(user.getInfo());
// // console.log(user.name);
// // console.log(user.age);
// // console.log(user.male);
// user.height = 180;
// // delete user.name;
// // console.log(user.getInfo());

// for (const key in user) {
//   console.log(`${key}: ${user[key]}`);
// }
// // console.log(Object.keys(user));
// // console.log(Object.values(user));
// console.log("");
// const userArr = Object.entries(user);
// console.log(userArr);
// console.log("");
// for (const el of userArr) {
//   console.log(`${el[0]}: ${el[1]}`);
// }

// // ------------------------------------------------

// const a = {
//   x: 1,
//   y: 2
// };

// const b = {
//   x: 0,
//   z: 3
// }

// // const c = {...a, ...b};
// const c = Object.assign({}, a, b);

// console.log(c);

// const arr1 = [1, 2, 3];
// const arr2 = [4, 5, 6];

// const arr3 = [...arr1, ...arr2];
// console.log(arr3);

// const hotel = {
//   name : "Resort Hotel",
//   stars: 5,
//   capacity: 100,
// };

// const person = {
//   name: "Hi",
//   age: 25,
// }

// // –û–±—ä—è–≤–∏–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –ø—Ä–∏—Å–≤–æ–∏–º –∏–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –æ–±—ä–µ–∫—Ç–∞
// const { name, stars, status = "free" } = hotel;
// const { name: name1, age, status: status1 = "asdadsa" } = person;

// console.log(name, stars, status);
// console.log(name1, age, status1);

// =============================–ú–æ–¥—É–ª—å 4, —É—Ä–æ–∫ 2=============================

// const users = ["Greengo", "Riki", "Floyd", "Marchellos"];
// let userIndex;

// for (let input of users) {
//   if (input === "Riki") {
//     userIndex = users.indexOf(input);
//   }
// }
// console.log(userIndex);

// let ask = prompt("Add a new user");

// if (users.includes(userInput) === false) {
//   users.push(userInput);
// } else {
//   alert ('This user has allready');
// }

// for (let user of users) {
//   let exist = true;
//   if (ask === user) {
//     alert("this user already exists");
//   } else {
//     users.push(ask);
//   }
// }
// console.log(userIndex);
// sliseArr = users.splice(userIndex,1);
// console.log(sliseArr);
// console.log(users);
// users.splice(userIndex, 0, "hi");
// console.log(users);

// –î–∞–ª—å—à–µ –¥–∞–≤–∞–π—Ç–µ –ø–µ—Ä–µ–ø–∏—à–µ–º –∫–∞–∂–¥—ã–π —à–∞–≥ –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é getUserID(id),
// addUser('string'), deleteUser(id), updateUser(id)

// function getUserID(name) {
//   let userIndex = "";
//   for (let input of users) {
//     if (input === name) {
//       userIndex = users.indexOf(input);
//     }
//   }
//   if (userIndex !== "") {
//     return userIndex;
//   } else {
//     alert("user is not finded");
//   }
//   console.log(userIndex);
// }

// console.log(getUserID("aabbbba")); // –µ—Å–ª–∏ —é–∑–µ—Ä–∞ –Ω–µ—Ç "user is not defined"

// const addUser = function(arr, name) {
//   if (arr.includes(name)) {
//     alert("user has already exist");
//   } else {
//     arr.push(name);
//   }
// };
// addUser(users, "Ajax");
// addUser(users, "Pablo");
// console.log(users);

// const deleteUser = userIndex => {
//   users.splice(userIndex, 1);
// };
// deleteUser(2);

// console.log("aftedDelete", users);
// deleteUser(getUserID("Max"));
// console.log(users);

// const updateUser = function(index, name, arr) {
//   arr[index] = name;
//   return arr;
// };
// console.log(getUserID("aaa"));
// console.log(updateUser(getUserID("aaa"), "Max", users));

// // - –≤—ã–≤–æ–¥–∏—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ–±—ä–µ–∫—Ç–∞ user –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∫–ª—é—á:–∑–Ω–∞—á–µ–Ω–∏–µ
// // –∏—Å–ø–æ–ª—å–∑—É—è Object.entries –∏ for...of

// const users = [
//   { id: "user_id_1", name: "Greengo" },
//   { id: "user_id_2", name: "Riki" },
//   { id: "user_id_3", name: "Floyd" },
//   { id: "user_id_4", name: "Marchellos" }
// ];
// // –æ–±–Ω–æ–≤–∏–º —Ñ—É–Ω–∫—Ü–∏—é getUserID id: 'user_id_111' - –¥–æ–ª–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å
// // –æ–±—ä–µ–∫—Ç —é–∑–µ—Ä —Å id user_id_111

// function getUserID(id) {
//   let userIndex = "";
//   for (let input of users) {
//     if (input.id === id) {
//       userIndex = users.indexOf(input);
//     }
//   }
//   if (userIndex !== "") {
//     return userIndex;
//   } else {
//     alert("user is not finded");
//   }
//   console.log(userIndex);
// }

// console.log(getUserID("user_id_2"));
// console.log(users[getUserID("user_id_2")].name);
// // -----------------------------------------
// const deleteUser = userIndex => {
//   users.splice(userIndex, 1);
// };
// deleteUser(2);
// console.log(users);
// console.log(deleteUser("user_id_111"));
// console.log(users);

// // // -----------------------------------------

// const updateUser = function(index, name, arr) {
//   arr[index] = name;
//   return arr[index];
// };

// const update = updateUser(getUserID("user_id_4"), 'Max', users);
// console.log(getUserID("user_id_2"));
// console.log(users);

// const addUser = function(arr, obj) {
//   arr.push(obj);
// }

// addUser(users, {id: 'user_id_555', name:'Ajax'});
// addUser(users, {id: 'user_id_666', name: 'Pablo'});
// console.log(users);

// const getAllUsers = function(arr) {
//   for (const el of arr) {
//     console.log(`id: ${el.id} name: ${el.name}`);
//   }
//  }

//  console.log(getAllUsers(users));

// --------------------practic--------------------------------

// const Student = function(name, birthday, slogan) {
//   this.name = name;
//   this.birthday = birthday;
//   this.slogan = slogan;
//   this.getSlogan = function() {
//     alert(`${this.slogan}`);
//   }
// }

// const newStudent = new Student('Ben', '2.08.1988', 'Winter is comming');
// console.log('newStudent :', newStudent);
// newStudent.getSlogan();

// // ==================–î–æ–º–∞—à–∫–∞

// /*
//   –°–æ–∑–¥–∞–π—Ç–µ —Å–∫—Ä–∏–ø—Ç –∫–∞—Å—Å–∏—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ –¥–µ–Ω—å–≥–∏,
//   –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ —Ö–≤–∞—Ç–∞–µ—Ç
//   –¥–µ–Ω–µ–≥ –∏–ª–∏ –Ω–µ—Ç, —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ.
// */

// /* –ï—Å—Ç—å –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤, –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–∏–º—è-—Ç–æ–≤–∞—Ä–∞":"—Ü–µ–Ω–∞ –∑–∞ –æ–¥–Ω—É –µ–¥–∏–Ω–∏—Ü—É" */
// const products = {
//   bread: 10,
//   milk: 15,
//   apples: 20,
//   chicken: 50,
//   cheese: 40,
// };

// /*
//   –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é-–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä Cashier.

//   –ü–æ–ª—è –±—É–¥—É—â–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –∫–∞—Å—Å–∏—Ä–∞ (üîî –æ–±—ä—è–≤–ª—è—é—Ç—Å—è –∫–∞–∫ this.–∏–º—è_–ø–æ–ª—è –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ):
//     - name - —Å—Ç—Ä–æ–∫–∞, –∏–º—è –∫–∞—Å—Å–∏—Ä–∞, –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞

//     - productDatabase - –æ–±—ä–µ–∫—Ç –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞

//     - customerMoney - —á–∏—Å–ª–æ, —Å—É–º–º–∞ –≤–≤–µ–¥–µ–Ω–Ω–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–µ–Ω–µ–≥, –≤—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 0

//     - getCustomerMoney(value) - –º–µ—Ç–æ–¥, –ø–æ–ª—É—á–∞–µ—Ç —á–∏—Å–ª–æ, –¥–µ–Ω—å–≥–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è, –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –µ–≥–æ –≤ –ø–æ–ª–µ customerMoney.

//     - countTotalPrice(order) - –º–µ—Ç–æ–¥, –ø–æ–ª—É—á–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫, —Å—á–∏—Ç–∞–µ—Ç –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∫—É–ø–æ–∫.
//       üîî –ö–ª—é—á–∏ –æ–±—ä–µ–∫—Ç–∞ order –µ—Å—Ç—å –≤ –æ–±—ä–µ–∫—Ç–µ productDatabase. –ò–∑ order –±–µ—Ä–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–¥–∏–Ω–∏—Ü –ø—Ä–æ–¥—É–∫—Ç–∞,
//          –∞ –∏–∑ productDatbase —Ü–µ–Ω—É –∑–∞ –æ–¥–Ω—É —à—Ç—É–∫—É –∏ —É–º–Ω–æ–∂–∞–µ–º, —Ç–∞–∫ –ø–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –∑–∞–∫–∞–∑–µ.
//          –ß—Ç–æ–±—ã –ø–æ—Å—á–∏—Ç–∞—Ç—å —Ü–µ–Ω—É –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∑–∞–∫–∞–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ü–∏–∫–ª, –ø–µ—Ä–µ–±—Ä–∞–≤ –≤—Å–µ –∫–ª—é—á–∏ order.

//     - countChange(totalPrice) - –º–µ—Ç–æ–¥, —Å—á–∏—Ç–∞–µ—Ç —Å–¥–∞—á—É, —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É –æ–±—â–µ–π —Å—É–º–º–æ–π –ø–æ–∫—É–ø–æ–∫ –∏ –¥–µ–Ω—å–≥–∞–º–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è.
//         * –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ customerMoney –Ω–µ –º–µ–Ω—å—à–µ —á–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ totalPrice
//         * –ï—Å–ª–∏ –¥–µ–Ω–µ–≥ –±—ã–ª–æ –ø–µ—Ä–µ–¥–∞–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞–∑–Ω–∏—Ü—É –¥–µ–Ω–µ–≥.
//         * –ï—Å–ª–∏ –≤ customerMoney –º–µ–Ω—å—à–µ –¥–µ–Ω–µ–≥ —á–µ–º –≤ totalPrice, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç null

//     - onSuccess(change) - –º–µ—Ç–æ–¥, –≤—ã–≤–æ–¥–∏—Ç –≤ –∫–æ–Ω—Å–æ–ª—å —Å—Ç—Ä–æ–∫—É `–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É, –≤–∞—à–∞ —Å–¥–∞—á–∞ ${change}!`.

//     - onError() - –º–µ—Ç–æ–¥, –≤—ã–≤–æ–¥–∏—Ç –≤ –∫–æ–Ω—Å–æ–ª—å —Å—Ç—Ä–æ–∫—É '–û—á–µ–Ω—å –∂–∞–ª—å, –≤–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥ –Ω–∞ –ø–æ–∫—É–ø–∫–∏'

//     - reset() - –º–µ—Ç–æ–¥, —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –ø–æ–ª–µ customerMoney 0.
// */
// // üîî –Ω–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –æ this –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ —Å–≤–æ–π—Å—Ç–≤–∞–º –∏ –º–µ—Ç–æ–¥–∞–º –±—É–¥—É—â–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞

// function Cashier(name, productDatabase) {
//   this.name = name;
//   this.productDatabase = productDatabase;
//   this.customerMoney = 0;
//   this.getCustomerMoney = function(value) {
//     this.customerMoney = value;
//   };
//   this.countTotalPrice = function(order) {
//     let totalPrice = 0;
//     for (let keys in order) {
//       totalPrice += order[keys] * this.productDatabase[keys];
//     }
//     return totalPrice;
//   };
//   this.countChange = function(totalPrice) {
//     let change = 0;
//     if (this.customerMoney >= totalPrice) {
//       change = this.customerMoney - totalPrice;
//       return change;
//     } else {
//       return null;
//     }
//   }
//   this.onSuccess = function(change) {
//     if (change !== null) {
//       alert(`–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É, –≤–∞—à–∞ —Å–¥–∞—á–∞ ${change}!`);
//     }
//   }
//   this.onError = function(change) {
//     if (change == null)
//     alert('–û—á–µ–Ω—å –∂–∞–ª—å, –≤–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥ –Ω–∞ –ø–æ–∫—É–ø–∫–∏');
//   }
//   this.reset = function(customerMoney) {
//     customerMoney = 0;
//   }
// };

// /* –ó–∞–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –≤–∏–¥–µ –æ–±—ä–µ–∫—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞. "–∏–º—è-–ø—Ä–æ–¥—É–∫—Ç–∞":"–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ-–µ–¥–∏–Ω–∏—Ü" */
// const order = {
//   bread: 2,
//   milk: 2,
//   apples: 1,
//   cheese: 1
// };

// /* –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è */
// const mango = new Cashier('Mango', products);

// // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª–µ–π
// console.log(mango.name); // Mango
// console.log(mango.productDatabase); // —Å—Å—ã–ª–∫–∞ –Ω–∞ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (–æ–±—ä–µ–∫—Ç products)
// console.log(mango.customerMoney); // 0

// // –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ countTotalPrice –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –æ–±—â–µ–π —Å—É–º–º—ã
// // –ø–µ—Ä–µ–¥–∞–≤–∞—è order - —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// const totalPrice = mango.countTotalPrice(order);

// // –ü—Ä–æ–≤–µ—Ä—è–º —á—Ç–æ –ø–æ—Å—á–∏—Ç–∞–ª–∏
// console.log(totalPrice); // 110

// // –í—ã–∑—ã–≤–∞–µ–º getCustomerMoney –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –¥–µ–Ω–µ–≥ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
// mango.getCustomerMoney(300);

// // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤ –ø–æ–ª–µ —Å –¥–µ–Ω—å–≥–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// console.log(mango.customerMoney); // 300

// // –í—ã–∑—ã–≤–∞–µ–º countChange –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Å–¥–∞—á–∏
// const change = mango.countChange(totalPrice);

// // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–∞–º –≤–µ—Ä–Ω—É–ª countChange
// console.log(change); // 190

// // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–¥—Å—á–µ—Ç–∞ –¥–µ–Ω–µ–≥
// if(change !== null) {
//    // –ü—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏ –≤—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ onSuccess
//   mango.onSuccess(change); // –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É, –≤–∞—à–∞ —Å–¥–∞—á–∞ 190
// } else {
//   // –ü—Ä–∏ –Ω–µ—É–¥–∞—á–Ω–æ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏ –≤—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ onError
//   mango.onError(); // –û—á–µ–Ω—å –∂–∞–ª—å, –≤–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥ –Ω–∞ –ø–æ–∫—É–ø–∫–∏
// }

// // –í—ã–∑—ã–≤–∞–µ–º reset –ø—Ä–∏ –ª—é–±–æ–º –∏—Å—Ö–æ–¥–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
// mango.reset();

// // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ—Å–ª–µ reset
// console.log(mango.customerMoney); // 0

// const user = {
//   name: 'Baron',
// };

// const user1 = {
//   name: 'Vasya',
// };

// const myFunc = function (message = '') {
//   console.log('this in myFunc:', this);
//   return `Hello my name is ${this.name}. ${message}`;
// };
// // console.log(myFunc()); // 'name' of undefined
// const result = myFunc.call(user, 'How are you?');
// console.log(result);

// user.getMyname = myFunc;
// console.log('call user1 to user.getMyName:',user.getMyname.call(user1));

// console.log('from user: ', user.getMyname());

// const action = function (callback) {
//   return callback('how are you', 'dsdsdsds');
// };

// console.log(action(myFunc.bind(user1)));

// ===================== practic 26.02
// const dogs = {
//   name: 'Yara',
//   breed: 'Shepherd',
// }

// const cat = {
//   name: 'Minu',
//   breed: 'Scottish',
// }

// const breedFunct = function () {
//   return `The animal breed is ${this.breed}`
// }

// const action = function(callback) {
//   return callback();
// }

// console.log(action(breedFunct.bind(dogs)));
// console.log(action(breedFunct.bind(cat)));

// console.log('call function with dogs object = ', breedFunct.call(dogs));
// console.log('apply function with dogs object = ', breedFunct.apply(dogs));

// console.log('call function with cat object = ', breedFunct.call(cat));
// console.log('apply function with cat object = ', breedFunct.apply(cat));

// ---------------Function Constructor

// function Dog(name = "Poops", age, breed, color, male, vegenation, facebook) {
//   this.name = name;
//   this.age = age;
//   this.breed = breed;
//   this.color = color;
//   this.male = male;
//   this.vegenation = vegenation;
//   this.facebook = facebook;
//   this.yep = function() {
//     return 'wwwwwwwwwooooooofffff'
//   }
// }

// const dog = new Dog(undefined, 2, "chau-chau", "black", "female", true, 'http://facebook.com/poops');
// console.log(dog);

// console.log(dog.yep());

// dog.getAboutData = function () {
//   return `name: ${this.name}; age: ${this.age}, breed: ${this.breed}`
// }
// console.log(dog.getAboutData());

// const dog2 = new Dog(undefined, 5, "–±–æ–∫—Å–µ—Ä", "orange", "male", false, undefined);
// console.log(dog2);

// const numbers = [1, 2, 3, 4, 5]; //not our mass

// // const ourArray =(transfer,numbersClone) => {//new mass
// //   let newMass = []; //future mass
// //   for (const numbersCloneElement of numbersClone) { //iteration of new mass
// //     const newElement = transfer(numbersCloneElement); // rewrite transfer element
// //     newMass.push(newElement); // rewrite new mass
// //   }
// //   return newMass; // return parametrs in numbersclone
// // };

// const double = (number) => number *2; // our function

// const triple = (number) => number *3;
// // const triple = function (number) {     //our function
// //   return number * 3;
// // };
// // const doubledNumbers = ourArray(double, numbers); // we need results
// // console.log(doubledNumbers); // [2, 4, 6, 8, 10]
// // const tripledNumbers = ourArray(triple,numbers);
// // console.log(tripledNumbers); // [3, 6, 9, 12, 15]

// const newMass = [];
// numbers.map(function(el) { return newMass.push(el*2) });
// newMass2 = [];
// numbers.map(function(el) { return newMass2.push(triple(el))});

// // console.log(numbers);
// // console.log(newMass);
// // console.log(newMass2);

// const values = [9, 65, 3423, 234, 523];

// const newArr = values.map(function(el, index) {
//   console.log(`${index} : ${el}`);
//   return el * 2;
// })
// const newArr3 = values.map(double);

// console.log('newArr', newArr);
// console.log('newArr3', newArr3);

// ---------------------example work map


// const numbers = [1, 2, 3, 4, 5]; 

// const mapExample = function(arr, transfer) {
//   const numbersNew = [];
//   for (const el of arr) {
//     const elNew = transfer(el);
//     numbersNew.push(elNew);
//   }
//   return numbersNew;
// }

// const arrowFunction = (number) => number * 4;

// console.log(mapExample(numbers, arrowFunction));

// ===============this in arrow function

// const hotel = {
//   name: 'hello',
//   showThis() {
//     console.log('this in showthis: ', this);

//     const fn = () => {
//       console.log('this in fn: ', this);
//     };

//     console.log('fn function –≤—ã–∑–æ–≤', fn());
//   }
// }

// hotel.showThis();

// ---
// const hotel = {
//   name: 'hello',
//   showThis() {
//     console.log('this in showthis: ', this);
//   },
// };

// const fn = function(callback) {
//   console.log('this in fn: ', this);
//   console.log('callback: ', callback);
//   callback();
// };

// hotel.newFn = fn;

// hotel.newFn(hotel.showThis);

// ===================================06.03=============================
//=======================================
//–°–æ–∑–¥–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é isEmpty(obj), –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç true, –µ—Å–ª–∏ –≤ –æ–±—ä–µ–∫—Ç–µ –Ω–µ—Ç —Å–≤–æ–π—Å—Ç–≤ –∏ false ‚Äì –µ—Å–ª–∏ —Ö–æ—Ç—å –æ–¥–Ω–æ —Å–≤–æ–π—Å—Ç–≤–æ –µ—Å—Ç—å.–†–∞–±–æ—Ç–∞—Ç—å –¥–æ–ª–∂–Ω–æ —Ç–∞–∫:
// function isEmpty(obj) {
//    if(Object.keys(obj).length){
//       return true;
//    }return false 
//  } 

//  let schedule = {}; 

//  alert( isEmpty(schedule) ); // true 
//  schedule["8:30"] = "–ø–æ–¥—ä—ë–º"; 
//  alert( isEmpty(schedule) ); // false

//=======================================
// –°—É–º–º–∞ —Å–≤–æ–π—Å—Ç–≤
// –≤–∞–∂–Ω–æ—Å—Ç—å: 5
// –ï—Å—Ç—å –æ–±—ä–µ–∫—Ç salaries —Å –∑–∞—Ä–ø–ª–∞—Ç–∞–º–∏. –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–≤–µ–¥–µ—Ç —Å—É–º–º—É –≤—Å–µ—Ö –∑–∞—Ä–ø–ª–∞—Ç.
// –ï—Å–ª–∏ –æ–±—ä–µ–∫—Ç –ø—É—Å—Ç–æ–π, —Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 0.
// –ù–∞–ø—Ä–∏–º–µ—Ä:
// "use strict";
// let salaries = {
//   "–í–∞—Å—è": 100,
//   "–ü–µ—Ç—è": 300,
//   "–î–∞—à–∞": 250
// };
// //... –≤–∞—à –∫–æ–¥ –≤—ã–≤–µ–¥–µ—Ç 650
// // P.S. –°–≤–µ—Ä—Ö—É —Å—Ç–æ–∏—Ç use strict, —á—Ç–æ–±—ã –Ω–µ –∑–∞–±—ã—Ç—å –æ–±—ä—è–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ.
// function getSumm (obj){
//    let summ = 0;
//    for(let key in obj){
//       summ += obj[key];
//    }return summ;
// }
// console.log(getSumm({}));
// console.log(getSumm(salaries));

// --------------------------------------------------------------------------------

// –°–≤–æ–π—Å—Ç–≤–æ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
// –≤–∞–∂–Ω–æ—Å—Ç—å: 5


// –ï—Å—Ç—å –æ–±—ä–µ–∫—Ç salaries —Å –∑–∞—Ä–ø–ª–∞—Ç–∞–º–∏. –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–≤–µ–¥–µ—Ç –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞,
//  —É –∫–æ—Ç–æ—Ä–æ–≥–æ —Å–∞–º–∞—è –±–æ–ª—å—à–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞.

// –ï—Å–ª–∏ –æ–±—ä–µ–∫—Ç –ø—É—Å—Ç–æ–π, —Ç–æ –ø—É—Å—Ç—å –æ–Ω –≤—ã–≤–æ–¥–∏—Ç ¬´–Ω–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤¬ª.

// –ù–∞–ø—Ä–∏–º–µ—Ä:

// var salaries = {
//   "–í–∞—Å—è": 100,
//   "–ü–µ—Ç—è": 300,
//   "–î–∞—à–∞": 250
// };
// let max = 0;
// let name = '';

// function bigSalary (obj) {
//   for (let key in obj) {
//     if (obj[key] >= max) {
//       max = obj[key];
//       name = key;
//     }
//   }
//   return name;
// }

// console.log(bigSalary(salaries));

// ... –≤–∞—à –∫–æ–¥ –≤—ã–≤–µ–¥–µ—Ç "–ü–µ—Ç—è"

// ==================================================
// –£–º–Ω–æ–∂—å—Ç–µ —á–∏—Å–ª–µ–Ω–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –Ω–∞ 2
// –≤–∞–∂–Ω–æ—Å—Ç—å: 3
// –°–æ–∑–¥–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é multiplyNumeric, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–ª—É—á–∞–µ—Ç –æ–±—ä–µ–∫—Ç 
// –∏ —É–º–Ω–æ–∂–∞–µ—Ç –≤—Å–µ —á–∏—Å–ª–µ–Ω–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –Ω–∞ 2. –ù–∞–ø—Ä–∏–º–µ—Ä:

// –¥–æ –≤—ã–∑–æ–≤–∞
// var menu = {
//   width: 200,
//   height: 300,
//   title: "My menu"
// };

// function multiplyNumeric(obj, callback) {
//   for (let key in obj) {
//     if (callback(obj[key])) {
//       obj[key] = obj[key]*2;
//     }
//   }
// }

// // –ø–æ—Å–ª–µ –≤—ã–∑–æ–≤–∞
// // menu = {
// //   width: 400,
// //   height: 600,
// //   title: "My menu"
// // };
// // P.S. –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —á–∏—Å–ª–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é:

// function isNumeric(n) {
//   return !isNaN(parseFloat(n)) && isFinite(n)
// }

// multiplyNumeric(menu, isNumeric);
// console.log(menu);

// ----------------------------------------------------------
// –ó–∞–¥–∞–Ω–∏–µ 10 –ù–∞–π—Ç–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –•—ç–µ—Å–∞, —Ç–æ –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 
// –≤–≤–æ–¥–∏—Ç —á–∏—Å–ª–æ –∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤—ã–¥–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å 
// —Å–∞–º–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —à–∞–≥–æ–≤,
// –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–Ω–∞–¥–æ–±–∏–ª–æ—Å—å –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è —ç—Ç–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, 
// –∏ –≤–µ—Ä—à–∏–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, —ç—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∏–∑ —ç—Ç–æ–π 
// –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏. –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
// –•—ç–µ—Å–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è —Ç–∞–∫: –µ—Å–ª–∏ –≤–≤–µ–ª–∏ —á–∏—Å–ª–æ 9, —Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ, 
// –µ—Å–ª–∏ –æ–Ω–æ —á—ë—Ç–Ω–æ–µ, –¥–µ–ª–∏–º –Ω–∞ 2, –µ—Å–ª–∏ –Ω–µ—á–µ—Ç–Ω–æ–µ, —É–º–Ω–æ–∂–∞–µ–º –Ω–∞ 3 –∏ 
// –ø—Ä–∏–±–∞–≤–ª—è–µ–º 1, –∏ —Ç–∞–∫ –¥–æ —Ç–µ—Ö –ø–æ—Ä –ø–æ–∫–∞ —á–∏—Å–ª–æ –Ω–µ
// –±—É–¥–µ—Ç —Ä–∞–≤–Ω–æ 1.

// 9*3+1=28
// 28/2=14
// 14/2=7
// 7*3+1=22
// 22/2=11
// 11*3+1=34
// 34/2=17
// 17*3+1=52
// 52/2=26
// 26/2=13
// 13*3+1=40
// 40/2=20
// 20/2=10
// 10/2=5
// 5*3+1=16
// 16/2=8
// 8/2=4
// 4/2=2
// 2/2=1

// const Xeksa = function(num) {
//   let counter = 0;
//   let max = 0;
//   do {
//     if (num % 2 === 0 ) {
//       console.log(`${num} / 2 = ${num / 2}`);
//       num = num / 2;
//     } else {
//       console.log(`${num} * 3 + 1 = ${(num * 3) + 1}`);
//       num = (num * 3) + 1;
//       if (num >= max) {
//         max = num;
//       }
//     }
//     counter += 1;
//   } while (num !== 1);

//   console.log('counter:', counter);
//   console.log('max', max);

// };

// Xeksa(9);

